Best Time to Buy and Sell Stock IV

You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Notice that you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

0 <= k <= 109
0 <= prices.length <= 104
0 <= prices[i] <= 1000



SOlution:
C++:
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
          int n = prices.size();
        if(n==0||n==1 ||k==0){
            return 0;
        }
		//this is for u can do as many as transaction u can do ....
        if(k >= n/2){ 
            int prof = 0;
            for(int i=1;i<n;i++){
                
                if(prices[i]>prices[i-1])
                    prof +=prices[i]-prices[i-1];
            }
            return prof;
        }
        int dp[k+1][n];
        memset(dp , 0 , sizeof(dp));
        // for 1<=k<n/2
        for(int i=1;i<k+1;i++){
            int maxprofitbefore  = INT_MIN;
            for(int j=1;j<n;j++){
                maxprofitbefore = max(maxprofitbefore , dp[i-1][j-1] - prices[j-1]);
                dp[i][j] = max(dp[i][j-1], prices[j]+maxprofitbefore);
            }
        }
 
        return dp[k][n-1];
        
    }
};
