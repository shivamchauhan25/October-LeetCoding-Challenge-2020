Recover Binary Search Tree

You are given the root of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

Follow up: A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?

 

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.
Example 2:


Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.
 

Constraints:

The number of nodes in the tree is in the range [2, 1000].
-231 <= Node.val <= 231 - 1

Solution:
C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* last1;
    TreeNode* last2;
    TreeNode* node1;
    TreeNode* node2;
    void Postraversal(TreeNode* node)
    {
        if(node!=nullptr)
        {
            Postraversal(node->left);
            
            if(last1==nullptr)
                last1=node;
            else{
                if(node1==nullptr&&last1->val>node->val)
                {
                    //last2=last1;
                    node1=last1;
                }
                else if(node1!=nullptr&&last2->val>last1->val&&node->val>last1->val)
                {
                    node2=last1;
                    //return;
                }
                last2=last1;
                last1=node;
                
            }            
            Postraversal(node->right);
        }
    }
    void recoverTree(TreeNode* root) {
        last1=last2=node1=node2=nullptr;
        Postraversal(root);
        if(node2==nullptr)
            node2=last1;
        else if(last1->val<last2->val)
            node2=last1;
        
        cout<<node1->val<<endl;
        cout<<node2->val<<endl;
        
        
        int temp=node1->val;
        node1->val=node2->val;
        node2->val=temp;
        //return root;
        
    }
};
