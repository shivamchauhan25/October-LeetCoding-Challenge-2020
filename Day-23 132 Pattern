132 Pattern

Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

Follow up: The O(n^2) is trivial, could you come up with the O(n logn) or the O(n) solution?

 

Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.
Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:

Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].
 

Constraints:

n == nums.length
1 <= n <= 104
-109 <= nums[i] <= 109


Solution:
C++:

class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        
        int n = nums.size();
        
        // no 132 pattern possible
        if(n<3) return false;
        
        // track min value in range 0 to i-1
        vector<int>minValues(n,INT_MAX);
        
        // store min values
        for(int i=1;i<n;i++)
            minValues[i] = min(minValues[i-1],nums[i-1]);
        
        stack<int>stak;
        
        // Loop through end to start
        for(int i=n-1;i>=0;i--)
        {
            // pop numbers from stack which are less or equal to minValue[i]
            // find next greater number of minValue[i]
            while(!stak.empty() && stak.top()<=minValues[i])
                stak.pop();
            
            // stack.top < nums[i] then it is a 132 pattern as stack.top > minValue[i]
            if(!stak.empty() && stak.top()< nums[i]) return true;
            
            stak.push(nums[i]);
        }
        
        return false;

    }
};
